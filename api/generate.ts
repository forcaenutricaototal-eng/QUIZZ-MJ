import { GoogleGenAI } from '@google/genai';
import type { VercelRequest, VercelResponse } from '@vercel/node';

// Duplicating types and data to make the function self-contained
enum QuestionType {
  Single = 'SINGLE',
  Multiple = 'MULTIPLE',
}
interface Option {
  label: string;
  value: string;
}
interface QuizQuestion {
  id: number;
  text: string;
  type: QuestionType;
  options: Option[];
}

const QUIZ_DATA: QuizQuestion[] = [
    {
        id: 1,
        text: 'Quais s√£o seus maiores desafios para emagrecer hoje? ü§î',
        type: QuestionType.Multiple,
        options: [
        { label: 'Efeito sanfona (emagre√ßo e volto a engordar) ‚öñÔ∏è', value: 'sanfona' },
        { label: 'Ansiedade, fome emocional e compuls√£o ü§Ø', value: 'ansiedade_compulsao' },
        { label: 'Metabolismo lento (tireoide, menopausa) üê¢', value: 'metabolismo' },
        { label: 'Incha√ßo, reten√ß√£o de l√≠quidos e inflama√ß√£o üíß', value: 'inchaco_inflamacao' },
        { label: 'Falta de consist√™ncia para seguir um plano ‚è≥', value: 'consistencia' },
        { label: 'Tenho lipedema', value: 'lipedema' },
        ],
    },
    {
        id: 2,
        text: 'Qual √© a sua faixa et√°ria? üéÇ',
        type: QuestionType.Single,
        options: [
            { label: '20 a 34 anos', value: '20-34' },
            { label: '35 a 44 anos', value: '35-44' },
            { label: '45 a 54 anos', value: '45-54' },
            { label: '55 a 64 anos', value: '55-64' },
            { label: '65 anos ou mais', value: '65+' },
        ],
    },
    {
        id: 3,
        text: 'Voc√™ j√° tentou alguma solu√ß√£o antes? üíä',
        type: QuestionType.Multiple,
        options: [
        { label: 'Medicamentos (ex: Ozempic, Monjaro)', value: 'medicamentos' },
        { label: 'Dietas restritivas (low-carb, jejum) ü•ó', value: 'dietas' },
        { label: 'Exerc√≠cios intensos üèãÔ∏è‚Äç‚ôÄÔ∏è', value: 'exercicios' },
        { label: 'Cirurgias bari√°tricas üè•', value: 'bariatrica' },
        ],
    },
    {
        id: 4,
        text: 'Qual seu objetivo principal? üèÜ',
        type: QuestionType.Multiple,
        options: [
        { label: 'Eliminar gordura abdominal üéØ', value: 'gordura_abdominal' },
        { label: 'Controlar fome e compuls√£o alimentar üß†', value: 'fome_compulsao' },
        { label: 'Desinflamar e reduzir reten√ß√£o de l√≠quidos (inclusive nas pernas) üíß', value: 'desinflamar_retencao' },
        { label: 'Manter os resultados com equil√≠brio e leveza ‚ú®', value: 'manter_resultados' },
        ],
    },
    {
        id: 5,
        text: 'O Monjaro farmac√™utico trata o sintoma. O Monjaro Japon√™s trata a causa. Resultado real: saciedade natural, menos compuls√£o e menos incha√ßo. Est√° pronta para a mudan√ßa que realmente funciona?',
        type: QuestionType.Single,
        options: [
          { label: 'Sim, estou pronta para a mudan√ßa! ‚úÖ', value: 'sim_pronta' },
          { label: 'Quero saber mais sobre a causa ü§î', value: 'saber_mais' },
          { label: 'Ainda n√£o tenho certeza ü§∑‚Äç‚ôÄÔ∏è', value: 'nao_tenho_certeza' },
        ],
    },
];

export default async function handler(
  request: VercelRequest,
  response: VercelResponse,
) {
    if (request.method !== 'POST') {
        return response.status(405).json({ error: 'Method Not Allowed' });
    }

    try {
        const { answers, name } = request.body;
        if (!answers) {
          return response.status(400).json({ error: 'Missing answers in request body' });
        }

        if (!process.env.API_KEY) {
            return response.status(500).json({ error: "A chave da API do Google n√£o foi configurada no ambiente do servidor. Por favor, adicione a vari√°vel de ambiente API_KEY nas configura√ß√µes do projeto no Vercel e fa√ßa um novo deploy." });
        }
        const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });
        
        const promptSummary = QUIZ_DATA.map(question => {
            const answerValues = answers[question.id] || [];
            if (answerValues.length === 0) return null;

            const answerLabels = answerValues.map(value =>
            question.options.find(opt => opt.value === value)?.label || value
            ).join(', ');

            return `- Pergunta "${question.text}": Resposta: "${answerLabels}"`;
        }).filter(Boolean).join('\n');
        
        const ageAnswer = answers[2]?.[0];
        const ageRangesOver40 = ['35-44', '45-54', '55-64', '65+'];
        const isOver40 = ageAnswer && ageRangesOver40.includes(ageAnswer);
        const userName = name ? name.split(' ')[0] : 'Voc√™';

        let systemInstruction = `
          Voc√™ √© Simone, uma especialista em emagrecimento para mulheres acima de 40. Sua tarefa √© analisar as respostas de um quiz e criar um diagn√≥stico personalizado, emp√°tico e encorajador.

          **NOME DA USU√ÅRIA:** ${userName}
          **IMPORTANTE:** Comece a resposta se dirigindo a ela pelo nome (Ex: "Ol√°, ${userName}!"). Use o nome dela de forma natural e pessoal ao longo do texto para criar conex√£o.

          **Formato da Resposta (Siga EXATAMENTE):**
          A resposta DEVE ter 3 se√ß√µes, com estes t√≠tulos exatos:
          **An√°lise do seu Perfil**
          **O Caminho para seu Resultado**
          **Meu Convite para Voc√™**

          **Regras para Cada Se√ß√£o:**

          1.  **An√°lise do seu Perfil:**
              *   Identifique o principal "bloqueio" de emagrecimento da usu√°ria (ex: hormonal, ansiedade, inflama√ß√£o).
              *   Personalize a an√°lise com base na idade dela (ex: menopausa para 45+, vitalidade para 65+).
              *   Seja emp√°tica e breve.

          2.  **O Caminho para seu Resultado:**
              *   Explique como o "Monjaro Japon√™s" resolve o bloqueio que voc√™ identificou.
              *   **INCLUA ESTA EXPLICA√á√ÉO T√âCNICA (OBRIGAT√ìRIO):** "Enquanto o Monjaro de farm√°cia ativa apenas os horm√¥nios GIP e GLP-1, o nosso protocolo Monjaro Japon√™s √© muito mais poderoso. Ele estimula um conjunto completo de horm√¥nios da saciedade ‚Äî GIP, GLP-1, CCK e PYY ‚Äî atrav√©s de alimentos espec√≠ficos. Para refor√ßar ainda mais essa sensa√ß√£o, o protocolo inclui alimentos que aumentam a produ√ß√£o de neurotransmissores como serotonina, dopamina e noradrenalina. Eles agem diretamente no centro da fome, inibindo o apetite de forma natural. √â por isso que o resultado √© t√£o profundo e duradouro."
              *   **ADICIONE ESTA PROVA SOCIAL (OBRIGAT√ìRIO):** "Quem aplicou o m√©todo descreve essa sensa√ß√£o impressionante de saciedade natural: a fome some e o corpo fica satisfeito."

          3.  **Meu Convite para Voc√™:**
              *   Fa√ßa uma chamada para a√ß√£o pessoal e urgente.
              *   Convide-a para conversar com voc√™ (Simone) no WhatsApp para receber acesso ao protocolo personalizado atrav√©s de um **aplicativo exclusivo**.
              *   Exemplo de frase: "Vi que seu caso tem solu√ß√£o. Preparei um protocolo inicial. Clique no bot√£o abaixo para receber o acesso ao nosso aplicativo e come√ßarmos juntas."

          **Estilo de Escrita:**
          *   Seja acolhedora, confiante e use emojis sutis (üçµ, ‚ú®, ‚úÖ).
          *   Use par√°grafos curtos.
          *   N√£o adicione introdu√ß√µes ou conclus√µes fora das 3 se√ß√µes.
        `;

        if (isOver40) {
          systemInstruction += `
          \n**HIST√ìRIA PESSOAL (OBRIGAT√ìRIO PARA ESTA USU√ÅRIA):**
          Como esta usu√°ria tem 40 anos ou mais, voc√™ DEVE incluir sua hist√≥ria pessoal na se√ß√£o **O Caminho para seu Resultado**. Diga exatamente isto, de forma natural: "Eu entendo perfeitamente sua luta, ${userName}, pois j√° estive a√≠. Em 2017, eu eliminei 73kg. Eu sofria com uma compuls√£o alimentar muito forte e com lipedema grau 3, um quadro que muitos consideravam imposs√≠vel de reverter. Foi o Monjaro Japon√™s que me permitiu vencer essa batalha, pois a estrat√©gia √© desenhada para ser altamente eficiente em casos como o nosso. Eu sou a prova viva disso." Use isso para gerar confian√ßa.
          `;
        }
        
        const userContent = `Aqui est√£o as respostas da usu√°ria ${userName} para voc√™ analisar:\n${promptSummary}`;

        const geminiResponse = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: userContent,
            config: {
                systemInstruction: systemInstruction
            }
        });
        
        const analysisText = geminiResponse.text;

        if (!analysisText || analysisText.trim() === '') {
            console.error("--- GEMINI RESPONSE EMPTY ---");
            console.error("Prompt Summary:", promptSummary);
            console.error("Full Gemini Response:", JSON.stringify(geminiResponse, null, 2));
            return response.status(500).json({ error: 'A IA n√£o conseguiu gerar uma an√°lise para estas respostas. Isso pode ocorrer devido a restri√ß√µes de seguran√ßa ou uma falha tempor√°ria. Por favor, tente novamente.' });
        }

        return response.status(200).json({ analysis: analysisText });

    } catch (e: any) {
        console.error("--- DETAILED ERROR in /api/generate ---");
        console.error("Error Message:", e.message);
        console.error("Error Stack:", e.stack);
        if (e.cause) console.error("Error Cause:", e.cause);
        console.error("--- END OF ERROR ---");
        
        let errorMessage = 'A server error has occurred';
        if (e.message) {
            errorMessage += `\n${e.message}`;
        }
        return response.status(500).json({ error: errorMessage });
    }
}